{"version":3,"sources":["services/personService.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","ContactList","persons","filter","handleDelete","newFilter","toLowerCase","newPersons","person","name","includes","map","Filter","filterByName","handleFilterByNameChange","value","onChange","PersonForm","onSubmit","handleNameChange","handleNumberChange","newName","newNumber","type","Person","number","onClick","Notification","message","className","App","useState","setPersons","setNewName","setNewNumber","setFilterByName","errorMessage","setErrorMessage","notificationMessage","setNotificationMessage","useEffect","personService","initialPersons","updateNumber","personObject","find","p","returnedPerson","setTimeout","catch","event","target","preventDefault","element","window","confirm","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f0673316.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'https://puhelinuettelobackend.herokuapp.com/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst deletePerson = id => {\n\tconst request = axios.delete(`${baseUrl}/${id}`)\n\treturn request.then(response => response.data)\n}\n\nexport default { getAll, create, update, deletePerson }","import React, { useState, useEffect } from 'react'\nimport personService from './services/personService'\nimport './App.css'\n\n\nconst ContactList = ({ persons, filter, handleDelete }) => {\n  const newFilter = filter.toLowerCase()\n  const newPersons = persons.filter((person) => person.name.toLowerCase().includes(newFilter) )\n  return (\n    <ul>\n      {newPersons.map(person => <Person key={person.id} person={person} handleDelete={handleDelete} />)}\n    </ul>\n  )\n}\n\nconst Filter = ({ filterByName, handleFilterByNameChange }) => {\n  return (\n    <form>\n        <div>\n          filter by name: \n          <input \n            value={filterByName}\n            onChange={handleFilterByNameChange}\n          />\n          </div>\n      </form>\n  )\n}\n\nconst PersonForm = ({ onSubmit, handleNameChange, handleNumberChange, newName, newNumber }) => {\n  return (\n    <form onSubmit={onSubmit}>\n        <div>\n          name: \n          <input \n            value={newName}\n            onChange={handleNameChange}\n          />\n          <br></br>\n          number:\n          <input \n            value={newNumber}\n            onChange={handleNumberChange}\n          />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n  )\n}\n\nconst Person = ({ person, handleDelete }) => {\n  return (\n    <li>\n      {person.name} {person.number} <button onClick={() => handleDelete(person)}>delete</button>\n    </li>\n  )\n}\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  if (message.includes('succes')) {\n    return (\n      <div className=\"notification\">\n        {message}\n      </div>\n    ) \n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filterByName, setFilterByName ] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [notificationMessage, setNotificationMessage] = useState(null)\n\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const addContact = (event) => {\n    event.preventDefault()\n    const found = persons.find(element => element.name === newName)\n    if (!found) {\n\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n\n      personService\n        .create(personObject)\n          .then(returnedPerson => {\n            setPersons(persons.concat(returnedPerson))\n            setNotificationMessage(`Person ${newName} succesfully added to server`)\n            setTimeout(() => {\n              setNotificationMessage(null)\n            }, 5000)\n          })\n    } else {\n      if (window.confirm(`${newName} is already on list. Replace old number with a new one?`)) {\n        updateNumber()\n      }\n    }\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const updateNumber = () => {\n    const personObject = {\n      id: persons.find(p => p.name.includes(newName)).id,\n      name: newName,\n      number: newNumber\n    }\n\n    personService\n      .update(personObject.id, personObject)\n      .then(returnedPerson => {\n        setPersons(persons.map(p => p.id !== returnedPerson.id ? p : returnedPerson))\n        setNotificationMessage(`Persons ${newName} number succesfully updated to server`)\n            setTimeout(() => {\n              setNotificationMessage(null)\n            }, 5000)\n      })\n      .catch(() => {\n        setErrorMessage(`Person ${newName} was already deleted from the server`)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n      })\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterByNameChange = (event) => {\n    setFilterByName(event.target.value)\n  }\n\n  const handleDelete =  person  => {\n    if (window.confirm(`Delete ${person.name}?`)) {\n      personService\n        .deletePerson(person.id)\n        .then(() => {\n          setPersons(persons.filter(p => p.id !== person.id))\n          setNotificationMessage(`Person ${person.name} succesfully deleted from server`)\n            setTimeout(() => {\n              setNotificationMessage(null)\n            }, 5000)\n        })\n        \n    }\n\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Filter \n        filterByName={filterByName} \n        handleFilterByNameChange={handleFilterByNameChange}\n      />\n      <h2>Add a new</h2>\n      <Notification message={errorMessage} />\n      <Notification message={notificationMessage} />\n      <PersonForm \n        onSubmit={addContact}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n        newName={newName}\n        newNumber={newNumber}\n      />\n      <h2>Numbers</h2>\n      <ContactList persons={persons} filter={filterByName} handleDelete={handleDelete} />\n      ...\n    </div>\n  )\n\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}